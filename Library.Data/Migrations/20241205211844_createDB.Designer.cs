// <auto-generated />
using System;
using Library.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241205211844_createDB")]
    partial class createDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library.Core.Models.Book", b =>
                {
                    b.Property<int>("IdBook")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBook"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<bool>("IsBorrowing")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdBook");

                    b.ToTable("BookList");
                });

            modelBuilder.Entity("Library.Core.Models.Borrow", b =>
                {
                    b.Property<int>("IdBorrow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBorrow"));

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BorrowedBookIdBook")
                        .HasColumnType("int");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SubscriberIdSubscribe")
                        .HasColumnType("int");

                    b.HasKey("IdBorrow");

                    b.HasIndex("BorrowedBookIdBook");

                    b.HasIndex("SubscriberIdSubscribe");

                    b.ToTable("BorrowList");
                });

            modelBuilder.Entity("Library.Core.Models.Subscribe", b =>
                {
                    b.Property<int>("IdSubscribe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSubscribe"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriberId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSubscribe");

                    b.ToTable("SubscribeList");
                });

            modelBuilder.Entity("Library.Core.Models.Borrow", b =>
                {
                    b.HasOne("Library.Core.Models.Book", "BorrowedBook")
                        .WithMany()
                        .HasForeignKey("BorrowedBookIdBook");

                    b.HasOne("Library.Core.Models.Subscribe", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberIdSubscribe");

                    b.Navigation("BorrowedBook");

                    b.Navigation("Subscriber");
                });
#pragma warning restore 612, 618
        }
    }
}
